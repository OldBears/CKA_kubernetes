一、Pod控制器进阶

  1、大部分资源的配置清单：
      
      (1)apiversion
      以group/version的方式定义
          #kubectl api-versions,查看
      (2)kind：资源类别
      Pod ReplicaSet, Deployment, Statefulset, DaemonSet, Job, Crontab
      
      (3)metadata：元数据
        name
        namespace
        labels
        annotations
        
        selflink每个资源的引用PATH
          /api/GROUP/version/namespaces/NAMESPACE/TYPE/NAME
       
       (4)spec:期望的状态，disired state
       
       (5)status:当前状态
       
 2、pod资源
 
      spec.containers <[]object>
      - name (string)
        image <string>
        imagePullPolicy <string>
        
          Always：不管镜像是否存在都会进行一次拉取。
          Never：不管镜像是否存在都不会进行拉取
          IfNotPresent：只有镜像不存在时，才会进行镜像拉取。
      注意：
          默认为IfNotPresent，但:latest标签的镜像默认为Always。
          拉取镜像时docker会进行校验，如果镜像中的MD5码没有变，则不会拉取镜像数据。
          生产环境中应该尽量避免使用:latest标签，而开发环境中可以借助:latest标签自动拉取最新的镜像。
          
        command
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
          
      标签:
      
        key=value
          key:由字母、数字、_、-、.
          value:可以为空，只能以字母或数字开头及结尾，中间可使用
        
        A、为pod-demo创建新的标签
        # kubectl label pods pod-demo release=canary
        # kubectl get pods --show-labels
          NAME                      READY   STATUS    RESTARTS   AGE     LABELS
          nginx1-55fb7cfccd-6mj7f   1/1     Running   0          5h16m   pod-template-hash=55fb7cfccd,run=nginx1
          pod-demo                  2/2     Running   3          31m     app=myapp,release=canary,tier=frontend
        
        B、为pod-demo覆盖旧的标签
        
        # kubectl label pods pod-demo release=stable
        error: 'release' already has a value (canary), and --overwrite is false
        # kubectl label pods pod-demo release=stable --overwrite
        pod/pod-demo labeled
        # kubectl get pods --show-labels
        NAME                      READY   STATUS    RESTARTS   AGE     LABELS
        nginx1-55fb7cfccd-6mj7f   1/1     Running   0          5h19m   pod-template-hash=55fb7cfccd,run=nginx1
        pod-demo                  2/2     Running   3          33m     app=myapp,release=stable,tier=frontend
      
        C、查询拥有stable标签的pod
        
        [root@master ~]# kubectl get pods -l release,app
        NAME       READY   STATUS    RESTARTS   AGE
        pod-demo   2/2     Running   4          37m

        D、标签等值器
        等值关系：=、==、！=，查询的时候用，比如kubectl get pods -l release!=stable
        集合关系：
                KEY in (VALUE1,VALUE2,...)
                KEY notin (VALUE1,...) 
                !KEY
                
        # kubectl get pods -l "release in (stable,run,beta)"
        NAME       READY   STATUS    RESTARTS   AGE
        pod-demo   2/2     Running   7          64m
        [root@master ~]# kubectl get pods -l "release notin (stable,run,beta)"
        NAME                      READY   STATUS    RESTARTS   AGE
        nginx1-55fb7cfccd-6mj7f   1/1     Running   0          5h50m

        E、许多资源支持内嵌字段定义其使用的标签选择器
        
            matchLables:直接给定键值
            matchExpressions:基于给定的表达式来定义使用标签选择器,{key:"KEY",operator:"OPETATOR",values:[VAL1,VAL2..]}
              操作符：
              In,NotIn:values值必须为非空列表；
              Exists,NotExists：values值必须为空列表；
              
        F、nodeSelector <map[string]string>
        
            节点标签选择器
           
            # kubectl get nodes --show-labels
              NAME     STATUS   ROLES    AGE   VERSION   LABELS
              master   Ready    master   18d   v1.12.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=master,node-role.kubernetes.io/master=
              node1    Ready    <none>   18d   v1.12.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=node1
              node2    Ready    <none>   18d   v1.12.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=node2
              
            # kubectl label nodes node1 disk=ssd
              node/node1 labeled
   
            # kubectl get nodes -l disk --show-labels
              NAME    STATUS   ROLES    AGE   VERSION   LABELS
              node1   Ready    <none>   18d   v1.12.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,disk=ssd,kubernetes.io/hostname=node1
              
       G、使用nodeSelector进行pods节点选择
       
          step one、attach label to node
          Run "kubectl get nodes" to get the names of your cluster’s nodes. Pick out the one that you want to add a label to, and then run "kubectl label nodes <node-name> <label-key>=<label-value> "to add a label to the node you’ve chosen. For example, if my node name is ‘kubernetes-foo-node-1.c.a-robinson.internal’ and my desired label is ‘disktype=ssd’, then I can run 
          
          step two、Add a nodeSelector field（字段） to your pod configuration
          apiVersion: v1
          kind: Pod
          metadata:
            name: pod-demo
            namespace: default
            labels:
               app: myapp
               tier: frontend
          spec:
            containers:
            - name: mywebservice
              image: nginx:latest
            - name: mywebservice1
              image: nginx:latest
              imagePullPolicy: IfNotPresent
              command: 
              - "/bin/sh"
              - "-c"
              - "sleep 3600 "
            nodeSelector:
              disktype: ssd
           
           step three:create pods by yaml files
           #kubectl create -f pods.daemon.yaml
           #kubectl get pods -o wide
           #kubectl describe pods pod-demo
           
        H、使用nodeName进行节点选择<string>
        
            nodeName: node1
            
        I、annotations:
        
           与label不同的地方在于，它不能用于挑选资源对象，仅用于为对象提供“元数据”。
           
        J、pod生命周期
        
           pending：
           Running：运行状态
           Failed：失败
           successed：
           unknown:
           创建pod：提供给apiserver，保存在etcd中，再进行schelle调试，调度到node1中运行pod
          

         
    
